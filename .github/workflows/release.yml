# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Release

on:
  push:
    tags: [ 'v*' ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - name: Cache pnpm modules
      uses: actions/cache@v2
      env:
        cache-name: cache-pnpm-modules
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-
    - name: Setup MySQL
      uses: mirromutth/mysql-action@v1.1
      with:
        # MYSQL_ROOT_PASSWORD - root superuser password
        mysql root password: gasdoldedseasder
        # MYSQL_DATABASE - name for the default database that is created
        mysql database: gserver
        # MYSQL_USER - create the specified user with superuser power for created database
        mysql user: gserver
        # MYSQL_PASSWORD - specified superuser password which user is power for created database
        mysql password: gserver
    - uses: pnpm/action-setup@v2.2.1
      with:
        version: latest
        run_install: true
    - name: Build Server
      run: |
        pnpm build
        pnpm bundle
    - name: Test Server
      run: |
        sh ./scripts/workflow/test-server.sh
    - name: Bundle Package
      uses: actions/upload-artifact@v3
      with:
        name: bundle
        path: out/index.js
    - name: Programs Package
      uses: actions/upload-artifact@v3
      with:
        name: NS-server
        path: out
    - name: Deploy to Vercel
      run: | 
        if [ ! -n "$(git remote -v | grep wibus-wee)" ]; then
        echo "组织仓库不能继续操作"
        else
        VERCEL_ENV=action_production
        npx vercel --token ${VERCEL_TOKEN} --prod
        fi

    - name: zip the bundle
      run: |
        zip -r bundle.zip out/index.js
    - name: zip the programs
      run: |
        zip -r NS-server.zip out

    - name: "Build Changelog"
      id: build_changelog
      uses: mikepenz/release-changelog-builder-action@v3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release and Upload Release Asset
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        tag_name: ${{ github.ref }}
        name: ${{ github.ref }}
        body: ${{steps.github_release.outputs.changelog}}
        draft: true
        prerelease: false
        files: |
          - bundle.zip
          - NS-server.zip
    # - name: Create Release
    #   uses: actions/create-release@v3
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: ${{ github.ref }}
    #     body: ${{steps.github_release.outputs.changelog}}
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
